import asyncio
import aiomysql

async def read_sql(host, user, password, database, sql, result_list):
    conn = await aiomysql.connect(host=host, user=user, password=password, db=database, charset='utf8mb4')
    cursor = await conn.cursor()
    await cursor.execute(sql)
    result = await cursor.fetchall()
    result_list.append(result)
    await cursor.close()
    conn.close()

if __name__ == '__main__':
    sql_list = [('localhost', 'root', '123456', 'test1', 'select * from table1'),
                ('localhost', 'root', '123456', 'test2', 'select * from table2'),
                ('localhost', 'root', '123456', 'test3', 'select * from table3')]
    result_list = []
    loop = asyncio.get_event_loop()
    tasks = [read_sql(*item[:-1], item[-1], result_list) for item in sql_list]
    loop.run_until_complete(asyncio.wait(tasks))
    loop.close()
    print(result_list)





import asyncio
import pandas as pd
import cx_Oracle

async def read_sql(sql):
    # 连接Oracle数据库
    conn = await asyncio.get_event_loop().run_in_executor(None, cx_Oracle.connect, 'user/password@host:port/service_name')
    # 执行SQL语句并获取结果集
    result = await asyncio.get_event_loop().run_in_executor(None, pd.read_sql, sql, conn)
    # 关闭数据库连接
    await asyncio.get_event_loop().run_in_executor(None, conn.close)
    return result

async def main():
    # 定义需要读取的SQL语句
    sql_list = ['SELECT * FROM table1', 'SELECT * FROM table2']
    # 并发读取SQL语句的结果
    tasks = [asyncio.create_task(read_sql(sql)) for sql in sql_list]
    results = await asyncio.gather(*tasks)
    # 合并结果集
    df = pd.concat(results)
    # 对结果进行后续处理
    # ...

if __name__ == '__main__':
    asyncio.run(main())







import pandas as pd
import multiprocessing as mp
import cx_Oracle

def read_sql(sql):
    # 连接Oracle数据库
    conn = cx_Oracle.connect('user/password@host:port/service_name')
    # 执行SQL语句并获取结果集
    result = pd.read_sql(sql, conn)
    # 关闭数据库连接
    conn.close()
    return result

if __name__ == '__main__':
    # 定义需要读取的SQL语句
    sql_list = ['SELECT * FROM table1', 'SELECT * FROM table2']
    # 创建进程池
    pool = mp.Pool(processes=len(sql_list))
    # 并发读取SQL语句的结果
    results = pool.map(read_sql, sql_list)
    # 合并结果集
    df = pd.concat(results)
    # 对结果进行后续处理
    # ...






import asyncio
import pandas as pd
import cx_Oracle

async def read_table(conn_info, table_name):
    # 连接Oracle数据库
    conn = await asyncio.get_event_loop().run_in_executor(None, cx_Oracle.connect, conn_info)
    # 读取表数据
    df = await asyncio.get_event_loop().run_in_executor(None, pd.read_sql, f"SELECT * FROM {table_name}", conn)
    # 关闭数据库连接
    await asyncio.get_event_loop().run_in_executor(None, conn.close)
    return df

async def main():
    # 定义需要读取的表名和对应的Oracle实例连接信息
    table_infos = {
        'table1': 'user1/password1@host1:port1/service_name1',
        'table2': 'user2/password2@host2:port2/service_name2',
        'table3': 'user3/password3@host3:port3/service_name3'
    }
    # 并发读取表数据
    tasks = [asyncio.create_task(read_table(conn_info, table_name)) for table_name, conn_info in table_infos.items()]
    results = await asyncio.gather(*tasks)
    # 处理读取的结果
    # ...

if __name__ == '__main__':
    asyncio.run(main())
    
    
   
   
   
 import asyncio
import pandas as pd
import cx_Oracle

async def read_table(conn_info, table_name):
    # 连接Oracle数据库
    conn = await asyncio.get_event_loop().run_in_executor(None, cx_Oracle.connect, conn_info)
    # 读取表数据
    df = await asyncio.get_event_loop().run_in_executor(None, pd.read_sql, f"SELECT * FROM {table_name}", conn)
    # 关闭数据库连接
    await asyncio.get_event_loop().run_in_executor(None, conn.close)
    return df

async def main():
    # 定义需要读取的表名和对应的Oracle实例连接信息
    table_infos = {
        'table1': 'user1/password1@host1:port1/service_name1',
        'table2': 'user2/password2@host2:port2/service_name2',
        'table3': 'user3/password3@host3:port3/service_name3'
    }
    # 并发读取表数据
    tasks = [asyncio.create_task(read_table(conn_info, table_name)) for table_name, conn_info in table_infos.items()]
    results = await asyncio.gather(*tasks)
    # 处理读取的结果
    # ...

if __name__ == '__main__':
    asyncio.run(main())








import cx_Oracle
import pandas as pd
from concurrent.futures import ThreadPoolExecutor, as_completed

def query_data(username, password, host, port, service_name, sql):
    dsn = cx_Oracle.makedsn(host, port, service_name=service_name)
    conn = cx_Oracle.connect(username, password, dsn=dsn)
    df = pd.read_sql(sql, conn)
    conn.close()
    return df

def read_data_from_oracle(instances, sqls, num_threads):
    results = {}
    with ThreadPoolExecutor(max_workers=num_threads) as executor:
        futures = []
        for instance in instances:
            username = instance['username']
            password = instance['password']
            host = instance['host']
            port = instance['port']
            service_name = instance['service_name']
            for sql in sqls:
                futures.append(executor.submit(query_data, username, password, host, port, service_name, sql))
        for future in as_completed(futures):
            df = future.result()
            results[(df.iloc[0]['INSTANCE_NAME'], df.iloc[0]['SQL_ID'])] = df
    return pd.concat(results.values(), ignore_index=True)
